<?php
/**
 * MarketApi
 * PHP version 5
 *
 * @category Class
 * @package  ESI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ESI\Api;

use \ESI\Configuration;
use \ESI\ApiClient;
use \ESI\ApiException;
use \ESI\ObjectSerializer;

/**
 * MarketApi Class Doc Comment
 *
 * @category Class
 * @package  ESI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MarketApi
{

    /**
     * API Client
     *
     * @var \ESI\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ESI\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ESI\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://esi.tech.ccp.is/dev');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ESI\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ESI\ApiClient $apiClient set the API client
     *
     * @return MarketApi
     */
    public function setApiClient(\ESI\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getMarketsPrices
     *
     * List market prices
     *
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \ESI\Model\GetMarketsPrices200Ok[]
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getMarketsPrices($datasource = null)
    {
        list($response) = $this->getMarketsPricesWithHttpInfo($datasource);
        return $response;
    }

    /**
     * Operation getMarketsPricesWithHttpInfo
     *
     * List market prices
     *
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \ESI\Model\GetMarketsPrices200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getMarketsPricesWithHttpInfo($datasource = null)
    {
        // parse inputs
        $resourcePath = "/markets/prices/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\GetMarketsPrices200Ok[]',
                '/markets/prices/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\GetMarketsPrices200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetMarketsPrices200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetMarketsPricesInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMarketsRegionIdHistory
     *
     * List historical market statistics in a region
     *
     * @param int $regionId Return statistics in this region (required)
     * @param int $typeId Return statistics for this type (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \ESI\Model\GetMarketsRegionIdHistory200Ok[]
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getMarketsRegionIdHistory($regionId, $typeId, $datasource = null)
    {
        list($response) = $this->getMarketsRegionIdHistoryWithHttpInfo($regionId, $typeId, $datasource);
        return $response;
    }

    /**
     * Operation getMarketsRegionIdHistoryWithHttpInfo
     *
     * List historical market statistics in a region
     *
     * @param int $regionId Return statistics in this region (required)
     * @param int $typeId Return statistics for this type (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \ESI\Model\GetMarketsRegionIdHistory200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getMarketsRegionIdHistoryWithHttpInfo($regionId, $typeId, $datasource = null)
    {
        // verify the required parameter 'regionId' is set
        if ($regionId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $regionId when calling getMarketsRegionIdHistory');
        }
        // verify the required parameter 'typeId' is set
        if ($typeId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $typeId when calling getMarketsRegionIdHistory');
        }
        // parse inputs
        $resourcePath = "/markets/{region_id}/history/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($typeId !== null) {
            $queryParams['type_id'] = $this->apiClient->getSerializer()->toQueryValue($typeId);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($regionId !== null) {
            $resourcePath = str_replace(
                "{" . "region_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($regionId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\GetMarketsRegionIdHistory200Ok[]',
                '/markets/{region_id}/history/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\GetMarketsRegionIdHistory200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetMarketsRegionIdHistory200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetMarketsRegionIdHistoryUnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetMarketsRegionIdHistoryInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMarketsRegionIdOrders
     *
     * List orders in a region
     *
     * @param int $regionId Return orders in this region (required)
     * @param string $orderType Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders. (required)
     * @param int $typeId Return orders only for this type (optional)
     * @param int $page Which page to query, only used for querying without type_id. Starting at 1 (optional, default to 1)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \ESI\Model\GetMarketsRegionIdOrders200Ok[]
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getMarketsRegionIdOrders($regionId, $orderType, $typeId = null, $page = null, $datasource = null)
    {
        list($response) = $this->getMarketsRegionIdOrdersWithHttpInfo($regionId, $orderType, $typeId, $page, $datasource);
        return $response;
    }

    /**
     * Operation getMarketsRegionIdOrdersWithHttpInfo
     *
     * List orders in a region
     *
     * @param int $regionId Return orders in this region (required)
     * @param string $orderType Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders. (required)
     * @param int $typeId Return orders only for this type (optional)
     * @param int $page Which page to query, only used for querying without type_id. Starting at 1 (optional, default to 1)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \ESI\Model\GetMarketsRegionIdOrders200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getMarketsRegionIdOrdersWithHttpInfo($regionId, $orderType, $typeId = null, $page = null, $datasource = null)
    {
        // verify the required parameter 'regionId' is set
        if ($regionId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $regionId when calling getMarketsRegionIdOrders');
        }
        // verify the required parameter 'orderType' is set
        if ($orderType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $orderType when calling getMarketsRegionIdOrders');
        }
        // parse inputs
        $resourcePath = "/markets/{region_id}/orders/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($typeId !== null) {
            $queryParams['type_id'] = $this->apiClient->getSerializer()->toQueryValue($typeId);
        }
        // query params
        if ($orderType !== null) {
            $queryParams['order_type'] = $this->apiClient->getSerializer()->toQueryValue($orderType);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($regionId !== null) {
            $resourcePath = str_replace(
                "{" . "region_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($regionId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\GetMarketsRegionIdOrders200Ok[]',
                '/markets/{region_id}/orders/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\GetMarketsRegionIdOrders200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetMarketsRegionIdOrders200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetMarketsRegionIdOrdersUnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetMarketsRegionIdOrdersInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMarketsStructuresStructureId
     *
     * List orders in a structure
     *
     * @param int $structureId Return orders in this structure (required)
     * @param int $page Which page to query, starting at 1 (optional, default to 1)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \ESI\Model\GetMarketsStructuresStructureId200Ok[]
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getMarketsStructuresStructureId($structureId, $page = null, $datasource = null)
    {
        list($response) = $this->getMarketsStructuresStructureIdWithHttpInfo($structureId, $page, $datasource);
        return $response;
    }

    /**
     * Operation getMarketsStructuresStructureIdWithHttpInfo
     *
     * List orders in a structure
     *
     * @param int $structureId Return orders in this structure (required)
     * @param int $page Which page to query, starting at 1 (optional, default to 1)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \ESI\Model\GetMarketsStructuresStructureId200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getMarketsStructuresStructureIdWithHttpInfo($structureId, $page = null, $datasource = null)
    {
        // verify the required parameter 'structureId' is set
        if ($structureId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $structureId when calling getMarketsStructuresStructureId');
        }
        // parse inputs
        $resourcePath = "/markets/structures/{structure_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($structureId !== null) {
            $resourcePath = str_replace(
                "{" . "structure_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($structureId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\GetMarketsStructuresStructureId200Ok[]',
                '/markets/structures/{structure_id}/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\GetMarketsStructuresStructureId200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetMarketsStructuresStructureId200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetMarketsStructuresStructureIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetMarketsStructuresStructureIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
