<?php
/**
 * FleetsApi
 * PHP version 5
 *
 * @category Class
 * @package  ESI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ESI\Api;

use \ESI\Configuration;
use \ESI\ApiClient;
use \ESI\ApiException;
use \ESI\ObjectSerializer;

/**
 * FleetsApi Class Doc Comment
 *
 * @category Class
 * @package  ESI
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FleetsApi
{

    /**
     * API Client
     *
     * @var \ESI\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \ESI\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\ESI\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://esi.tech.ccp.is/dev');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \ESI\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \ESI\ApiClient $apiClient set the API client
     *
     * @return FleetsApi
     */
    public function setApiClient(\ESI\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberId
     *
     * Kick fleet member
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $memberId The character ID of a member in this fleet (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \ESI\ApiException on non-2xx response
     */
    public function deleteFleetsFleetIdMembersMemberId($fleetId, $memberId, $datasource = null)
    {
        list($response) = $this->deleteFleetsFleetIdMembersMemberIdWithHttpInfo($fleetId, $memberId, $datasource);
        return $response;
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberIdWithHttpInfo
     *
     * Kick fleet member
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $memberId The character ID of a member in this fleet (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function deleteFleetsFleetIdMembersMemberIdWithHttpInfo($fleetId, $memberId, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling deleteFleetsFleetIdMembersMemberId');
        }
        // verify the required parameter 'memberId' is set
        if ($memberId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $memberId when calling deleteFleetsFleetIdMembersMemberId');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/members/{member_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                "{" . "member_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($memberId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/fleets/{fleet_id}/members/{member_id}/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\DeleteFleetsFleetIdMembersMemberIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\DeleteFleetsFleetIdMembersMemberIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\DeleteFleetsFleetIdMembersMemberIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadId
     *
     * Delete fleet squad
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $squadId The squad to delete (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \ESI\ApiException on non-2xx response
     */
    public function deleteFleetsFleetIdSquadsSquadId($fleetId, $squadId, $datasource = null)
    {
        list($response) = $this->deleteFleetsFleetIdSquadsSquadIdWithHttpInfo($fleetId, $squadId, $datasource);
        return $response;
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadIdWithHttpInfo
     *
     * Delete fleet squad
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $squadId The squad to delete (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function deleteFleetsFleetIdSquadsSquadIdWithHttpInfo($fleetId, $squadId, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling deleteFleetsFleetIdSquadsSquadId');
        }
        // verify the required parameter 'squadId' is set
        if ($squadId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $squadId when calling deleteFleetsFleetIdSquadsSquadId');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/squads/{squad_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // path params
        if ($squadId !== null) {
            $resourcePath = str_replace(
                "{" . "squad_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($squadId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/fleets/{fleet_id}/squads/{squad_id}/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\DeleteFleetsFleetIdSquadsSquadIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\DeleteFleetsFleetIdSquadsSquadIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\DeleteFleetsFleetIdSquadsSquadIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingId
     *
     * Delete fleet wing
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $wingId The wing to delete (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \ESI\ApiException on non-2xx response
     */
    public function deleteFleetsFleetIdWingsWingId($fleetId, $wingId, $datasource = null)
    {
        list($response) = $this->deleteFleetsFleetIdWingsWingIdWithHttpInfo($fleetId, $wingId, $datasource);
        return $response;
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingIdWithHttpInfo
     *
     * Delete fleet wing
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $wingId The wing to delete (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function deleteFleetsFleetIdWingsWingIdWithHttpInfo($fleetId, $wingId, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling deleteFleetsFleetIdWingsWingId');
        }
        // verify the required parameter 'wingId' is set
        if ($wingId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wingId when calling deleteFleetsFleetIdWingsWingId');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/wings/{wing_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // path params
        if ($wingId !== null) {
            $resourcePath = str_replace(
                "{" . "wing_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($wingId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/fleets/{fleet_id}/wings/{wing_id}/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\DeleteFleetsFleetIdWingsWingIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\DeleteFleetsFleetIdWingsWingIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\DeleteFleetsFleetIdWingsWingIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFleetsFleetId
     *
     * Get fleet information
     *
     * @param int $fleetId ID for a fleet (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \ESI\Model\GetFleetsFleetIdOk
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getFleetsFleetId($fleetId, $datasource = null)
    {
        list($response) = $this->getFleetsFleetIdWithHttpInfo($fleetId, $datasource);
        return $response;
    }

    /**
     * Operation getFleetsFleetIdWithHttpInfo
     *
     * Get fleet information
     *
     * @param int $fleetId ID for a fleet (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \ESI\Model\GetFleetsFleetIdOk, HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getFleetsFleetIdWithHttpInfo($fleetId, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling getFleetsFleetId');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\GetFleetsFleetIdOk',
                '/fleets/{fleet_id}/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\GetFleetsFleetIdOk', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetFleetsFleetIdOk', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetFleetsFleetIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetFleetsFleetIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetFleetsFleetIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFleetsFleetIdMembers
     *
     * Get fleet members
     *
     * @param int $fleetId ID for a fleet (required)
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \ESI\Model\GetFleetsFleetIdMembers200Ok[]
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getFleetsFleetIdMembers($fleetId, $language = null, $datasource = null)
    {
        list($response) = $this->getFleetsFleetIdMembersWithHttpInfo($fleetId, $language, $datasource);
        return $response;
    }

    /**
     * Operation getFleetsFleetIdMembersWithHttpInfo
     *
     * Get fleet members
     *
     * @param int $fleetId ID for a fleet (required)
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \ESI\Model\GetFleetsFleetIdMembers200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getFleetsFleetIdMembersWithHttpInfo($fleetId, $language = null, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling getFleetsFleetIdMembers');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/members/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\GetFleetsFleetIdMembers200Ok[]',
                '/fleets/{fleet_id}/members/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\GetFleetsFleetIdMembers200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetFleetsFleetIdMembers200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetFleetsFleetIdMembersForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetFleetsFleetIdMembersNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetFleetsFleetIdMembersInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFleetsFleetIdWings
     *
     * Get fleet wings
     *
     * @param int $fleetId ID for a fleet (required)
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \ESI\Model\GetFleetsFleetIdWings200Ok[]
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getFleetsFleetIdWings($fleetId, $language = null, $datasource = null)
    {
        list($response) = $this->getFleetsFleetIdWingsWithHttpInfo($fleetId, $language, $datasource);
        return $response;
    }

    /**
     * Operation getFleetsFleetIdWingsWithHttpInfo
     *
     * Get fleet wings
     *
     * @param int $fleetId ID for a fleet (required)
     * @param string $language Language to use in the response (optional, default to en-us)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \ESI\Model\GetFleetsFleetIdWings200Ok[], HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function getFleetsFleetIdWingsWithHttpInfo($fleetId, $language = null, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling getFleetsFleetIdWings');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/wings/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\GetFleetsFleetIdWings200Ok[]',
                '/fleets/{fleet_id}/wings/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\GetFleetsFleetIdWings200Ok[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetFleetsFleetIdWings200Ok[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetFleetsFleetIdWingsForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetFleetsFleetIdWingsNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\GetFleetsFleetIdWingsInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postFleetsFleetIdMembers
     *
     * Create fleet invitation
     *
     * @param int $fleetId ID for a fleet (required)
     * @param \ESI\Model\PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \ESI\ApiException on non-2xx response
     */
    public function postFleetsFleetIdMembers($fleetId, $invitation, $datasource = null)
    {
        list($response) = $this->postFleetsFleetIdMembersWithHttpInfo($fleetId, $invitation, $datasource);
        return $response;
    }

    /**
     * Operation postFleetsFleetIdMembersWithHttpInfo
     *
     * Create fleet invitation
     *
     * @param int $fleetId ID for a fleet (required)
     * @param \ESI\Model\PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function postFleetsFleetIdMembersWithHttpInfo($fleetId, $invitation, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling postFleetsFleetIdMembers');
        }
        // verify the required parameter 'invitation' is set
        if ($invitation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $invitation when calling postFleetsFleetIdMembers');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/members/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($invitation)) {
            $_tempBody = $invitation;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/fleets/{fleet_id}/members/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostFleetsFleetIdMembersForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostFleetsFleetIdMembersNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostFleetsFleetIdMembersUnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostFleetsFleetIdMembersInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postFleetsFleetIdWings
     *
     * Create fleet wing
     *
     * @param int $fleetId ID for a fleet (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \ESI\Model\PostFleetsFleetIdWingsCreated
     * @throws \ESI\ApiException on non-2xx response
     */
    public function postFleetsFleetIdWings($fleetId, $datasource = null)
    {
        list($response) = $this->postFleetsFleetIdWingsWithHttpInfo($fleetId, $datasource);
        return $response;
    }

    /**
     * Operation postFleetsFleetIdWingsWithHttpInfo
     *
     * Create fleet wing
     *
     * @param int $fleetId ID for a fleet (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \ESI\Model\PostFleetsFleetIdWingsCreated, HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function postFleetsFleetIdWingsWithHttpInfo($fleetId, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling postFleetsFleetIdWings');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/wings/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\PostFleetsFleetIdWingsCreated',
                '/fleets/{fleet_id}/wings/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\PostFleetsFleetIdWingsCreated', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostFleetsFleetIdWingsCreated', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostFleetsFleetIdWingsForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostFleetsFleetIdWingsNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostFleetsFleetIdWingsInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquads
     *
     * Create fleet squad
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $wingId The wing_id to create squad in (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return \ESI\Model\PostFleetsFleetIdWingsWingIdSquadsCreated
     * @throws \ESI\ApiException on non-2xx response
     */
    public function postFleetsFleetIdWingsWingIdSquads($fleetId, $wingId, $datasource = null)
    {
        list($response) = $this->postFleetsFleetIdWingsWingIdSquadsWithHttpInfo($fleetId, $wingId, $datasource);
        return $response;
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquadsWithHttpInfo
     *
     * Create fleet squad
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $wingId The wing_id to create squad in (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of \ESI\Model\PostFleetsFleetIdWingsWingIdSquadsCreated, HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function postFleetsFleetIdWingsWingIdSquadsWithHttpInfo($fleetId, $wingId, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling postFleetsFleetIdWingsWingIdSquads');
        }
        // verify the required parameter 'wingId' is set
        if ($wingId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wingId when calling postFleetsFleetIdWingsWingIdSquads');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/wings/{wing_id}/squads/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // path params
        if ($wingId !== null) {
            $resourcePath = str_replace(
                "{" . "wing_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($wingId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\ESI\Model\PostFleetsFleetIdWingsWingIdSquadsCreated',
                '/fleets/{fleet_id}/wings/{wing_id}/squads/'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\ESI\Model\PostFleetsFleetIdWingsWingIdSquadsCreated', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostFleetsFleetIdWingsWingIdSquadsCreated', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostFleetsFleetIdWingsWingIdSquadsForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostFleetsFleetIdWingsWingIdSquadsNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PostFleetsFleetIdWingsWingIdSquadsInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetId
     *
     * Update fleet
     *
     * @param int $fleetId ID for a fleet (required)
     * @param \ESI\Model\PutFleetsFleetIdNewSettings $newSettings What to update for this fleet (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \ESI\ApiException on non-2xx response
     */
    public function putFleetsFleetId($fleetId, $newSettings, $datasource = null)
    {
        list($response) = $this->putFleetsFleetIdWithHttpInfo($fleetId, $newSettings, $datasource);
        return $response;
    }

    /**
     * Operation putFleetsFleetIdWithHttpInfo
     *
     * Update fleet
     *
     * @param int $fleetId ID for a fleet (required)
     * @param \ESI\Model\PutFleetsFleetIdNewSettings $newSettings What to update for this fleet (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function putFleetsFleetIdWithHttpInfo($fleetId, $newSettings, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling putFleetsFleetId');
        }
        // verify the required parameter 'newSettings' is set
        if ($newSettings === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newSettings when calling putFleetsFleetId');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($newSettings)) {
            $_tempBody = $newSettings;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/fleets/{fleet_id}/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdBadRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdMembersMemberId
     *
     * Move fleet member
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $memberId The character ID of a member in this fleet (required)
     * @param \ESI\Model\PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \ESI\ApiException on non-2xx response
     */
    public function putFleetsFleetIdMembersMemberId($fleetId, $memberId, $movement, $datasource = null)
    {
        list($response) = $this->putFleetsFleetIdMembersMemberIdWithHttpInfo($fleetId, $memberId, $movement, $datasource);
        return $response;
    }

    /**
     * Operation putFleetsFleetIdMembersMemberIdWithHttpInfo
     *
     * Move fleet member
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $memberId The character ID of a member in this fleet (required)
     * @param \ESI\Model\PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function putFleetsFleetIdMembersMemberIdWithHttpInfo($fleetId, $memberId, $movement, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling putFleetsFleetIdMembersMemberId');
        }
        // verify the required parameter 'memberId' is set
        if ($memberId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $memberId when calling putFleetsFleetIdMembersMemberId');
        }
        // verify the required parameter 'movement' is set
        if ($movement === null) {
            throw new \InvalidArgumentException('Missing the required parameter $movement when calling putFleetsFleetIdMembersMemberId');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/members/{member_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                "{" . "member_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($memberId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($movement)) {
            $_tempBody = $movement;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/fleets/{fleet_id}/members/{member_id}/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdMembersMemberIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdMembersMemberIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdMembersMemberIdUnprocessableEntity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdMembersMemberIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadId
     *
     * Rename fleet squad
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $squadId The squad to rename (required)
     * @param \ESI\Model\PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \ESI\ApiException on non-2xx response
     */
    public function putFleetsFleetIdSquadsSquadId($fleetId, $squadId, $naming, $datasource = null)
    {
        list($response) = $this->putFleetsFleetIdSquadsSquadIdWithHttpInfo($fleetId, $squadId, $naming, $datasource);
        return $response;
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadIdWithHttpInfo
     *
     * Rename fleet squad
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $squadId The squad to rename (required)
     * @param \ESI\Model\PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function putFleetsFleetIdSquadsSquadIdWithHttpInfo($fleetId, $squadId, $naming, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling putFleetsFleetIdSquadsSquadId');
        }
        // verify the required parameter 'squadId' is set
        if ($squadId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $squadId when calling putFleetsFleetIdSquadsSquadId');
        }
        // verify the required parameter 'naming' is set
        if ($naming === null) {
            throw new \InvalidArgumentException('Missing the required parameter $naming when calling putFleetsFleetIdSquadsSquadId');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/squads/{squad_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // path params
        if ($squadId !== null) {
            $resourcePath = str_replace(
                "{" . "squad_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($squadId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($naming)) {
            $_tempBody = $naming;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/fleets/{fleet_id}/squads/{squad_id}/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdSquadsSquadIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdSquadsSquadIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdSquadsSquadIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdWingsWingId
     *
     * Rename fleet wing
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $wingId The wing to rename (required)
     * @param \ESI\Model\PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return void
     * @throws \ESI\ApiException on non-2xx response
     */
    public function putFleetsFleetIdWingsWingId($fleetId, $wingId, $naming, $datasource = null)
    {
        list($response) = $this->putFleetsFleetIdWingsWingIdWithHttpInfo($fleetId, $wingId, $naming, $datasource);
        return $response;
    }

    /**
     * Operation putFleetsFleetIdWingsWingIdWithHttpInfo
     *
     * Rename fleet wing
     *
     * @param int $fleetId ID for a fleet (required)
     * @param int $wingId The wing to rename (required)
     * @param \ESI\Model\PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
     * @param string $datasource The server name you would like data from (optional, default to tranquility)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \ESI\ApiException on non-2xx response
     */
    public function putFleetsFleetIdWingsWingIdWithHttpInfo($fleetId, $wingId, $naming, $datasource = null)
    {
        // verify the required parameter 'fleetId' is set
        if ($fleetId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fleetId when calling putFleetsFleetIdWingsWingId');
        }
        // verify the required parameter 'wingId' is set
        if ($wingId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wingId when calling putFleetsFleetIdWingsWingId');
        }
        // verify the required parameter 'naming' is set
        if ($naming === null) {
            throw new \InvalidArgumentException('Missing the required parameter $naming when calling putFleetsFleetIdWingsWingId');
        }
        // parse inputs
        $resourcePath = "/fleets/{fleet_id}/wings/{wing_id}/";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = $this->apiClient->getSerializer()->toQueryValue($datasource);
        }
        // path params
        if ($fleetId !== null) {
            $resourcePath = str_replace(
                "{" . "fleet_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fleetId),
                $resourcePath
            );
        }
        // path params
        if ($wingId !== null) {
            $resourcePath = str_replace(
                "{" . "wing_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($wingId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($naming)) {
            $_tempBody = $naming;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/fleets/{fleet_id}/wings/{wing_id}/'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdWingsWingIdForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdWingsWingIdNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\ESI\Model\PutFleetsFleetIdWingsWingIdInternalServerError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
