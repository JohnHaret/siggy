Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
};

function CountUp(initDate, selector)
{
  this.beginDate = new Date(initDate);
  this.numOfDays = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
  this.borrowed = 0, this.years = 0, this.months = 0, this.days = 0;
  this.hours = 0, this.minutes = 0, this.seconds = 0;
  this.updateNumOfDays();
  this.container = $( selector );
  this.calculate();
}
 
CountUp.prototype.updateNumOfDays=function()
{
	var dateNow = new Date();
  var currYear = dateNow.getFullYear();
  if ( (currYear % 4 == 0 && currYear % 100 != 0 ) || currYear % 400 == 0 ) 
  {
    this.numOfDays[1] = 29;
  }
  var self = this;
  
  setTimeout(function(){self.updateNumOfDays();}, (new Date((currYear+1), 1, 1) - dateNow));
  
  //memory management LOL
  dateNow = null;
  delete dateNow;
}
 
CountUp.prototype.datePartDiff=function(then, now, MAX)
{
  var diff = now - then - this.borrowed;
  this.borrowed = 0;
  if ( diff > -1 ) return diff;
  this.borrowed = 1;
  return (MAX + diff);
}
 
CountUp.prototype.formatTime=function()
{
  this.seconds = this.addLeadingZero(this.seconds);
  this.minutes = this.addLeadingZero(this.minutes);
  this.hours = this.addLeadingZero(this.hours);
}
 
CountUp.prototype.addLeadingZero=function(value)
{
  return value < 10 ? ('0' + value) : value;
}
 
CountUp.prototype.calculate=function()
{
  var currDate = new Date();
  var prevDate = this.beginDate;
  
  this.seconds = this.datePartDiff(prevDate.getSeconds(), currDate.getSeconds(), 60);
  this.minutes = this.datePartDiff(prevDate.getMinutes(), currDate.getMinutes(), 60);
  this.hours = this.datePartDiff(prevDate.getHours(), currDate.getHours(), 24);
  this.days = this.datePartDiff(prevDate.getDate(), currDate.getDate(), this.numOfDays[currDate.getMonth()]);
  //this.months = this.datePartDiff(prevDate.getMonth(), currDate.getMonth(), 12);
  //this.years = this.datePartDiff(prevDate.getFullYear(), currDate.getFullYear(),0);

  if( this.days == 1 )
  {
    this.hours += 24;
  }
  this.formatTime();
  
  if( this.days <= 1 )
  {
    this.container.text(this.hours + ":" + this.minutes + ":" + this.seconds);
  }
  else
  {
    this.container.text(this.days+" days");
  }
  
  var self = this;
  setTimeout(function(){self.calculate();}, 1000);
  
  currDate = null;
  delete currDate;
}

  function pad(number, length) 
  {   
      var str = '' + number;
      while (str.length < length) {
          str = '0' + str;
      }
     
      return str;
  }

  //first key is wh class, second is just unique for mag in the class
  var magsLookup = { 1: {0: "", 1: "Forgotten Perimeter Amplifier", 2:"Forgotten Perimeter Power Array"},
               2: {0: "", 1: "Forgotten Perimeter Gateway", 2:"Forgoten Perimeter Habitation Coils"},
               3: {0: "", 1: "Forgotten Frontier Quarantine Outpost", 2:"Forgotten Frontier Recursive Depot"},
               4: {0: "", 1: "Forgotten Frontier Conversion Module", 2: "Forgotten Frontier Evacuation Center"},
               5: {0: "", 1: "Forgotten Core Data Field", 2: "Forgotten Core Information Pen"},
               6: {0: "", 1: "Forgotten Core Assembly Hall", 2: "Forgotten Circuitry Disassembler" },
                7: {0: ""},
                8: {0: ""},
                9: {0: ""} };
               
  var radarsLookup = {1: {0: "", 1:"Unsecured Perimeter Amplifier", 2:"Unsecured Perimeter Information Center"},
                      2: {0: "", 1:"Unsecured Perimeter Comms Relay", 2:"Unsecured Transponder Farm"},
                      3: {0: "", 1: "Unsecured Frontier Database", 2: "Unsecured Frontier Receiver"},
                      4: {0: "", 1: "Unsecured Frontier Digital Nexus", 2: "Unsecured Frontier Trinary Hub" },
                      5: {0: "", 1: "Unsecured Frontier Enclave Relay", 2: "Unsecured Frontier Server Bank" },
                      6: {0: "", 1: "Unsecured Core Backup Array", 2:"Unsecured Core Emergence" },
                      7: {0: ""},
                      8: {0: ""},
                      9: {0: ""} };
                      
  var gravsLookup = { 0: "",
                      1: "Average Frontier Deposit", 
                      2: "Unexceptional Frontier Deposit", 
                      3: "Common Perimeter Deposit", 
                      4:"Exceptional Core Deposit", 
                      5:"Infrequent Core Deposit",
                      6: "Unusual Core Deposit", 
                      7: "Rarified Core Deposit",
                      8: "Ordinary Perimeter Deposit",
                      9: "Uncommon Core Deposit" };
                      
  var ladarsLookup = {0: "",
                    1: "Barren Perimeter Reservoir", 
                    2: "Minor Perimeter Reservoir", 
                    3:"Ordinary Perimeter Reservoir", 
                    4:"Sizable Perimeter Reservoir", 
                    5:"Token Perimeter Reservoir",
                    6:"Bountiful Frontier Reservoir", 
                    7:"Vast Frontier Reservoir",
                    8:"Instrumental Core Reservoir",
                    9:"Vital Core Reservoir"};
  
  var whLookup = { 1: {0:"Unstable Wormhole", 1:"K162 (from Unknown)", 2:"K162 (from Dangerous unknown)", 3:"K162 (from Deadly unknown)", 4:"K162 (from Nullsec)", 5:"K162 (from Lowsec)", 6:"K162 (from Highsec)", 7:"  (to C1)", 8:"  (to C2)", 9:"O883 (to C3)", 10:"  (to C4)",11:"  (to C5)", 12:"S806 (to C6)", 13: "  (to Nullsec)", 14: "  (to Lowsec)", 15: "  (to Highsec)"},
                   2: {0:"Unstable Wormhole", 1:"K162 (from Unknown)", 2:"K162 (from Dangerous unknown)", 3:"K162 (from Deadly unknown)", 4:"K162 (from Nullsec)", 5:"K162 (from Lowsec)", 6:"K162 (from Highsec)", 7:"Z647 (to C1)", 8:"D382 (to C2)", 9:"O477 (to C3)", 10:"Y683 (to C4)",11:"N062 (to C5)", 12:"R474 (to C6)", 13: "E545 (to Nullsec)", 14: "A239 (to Lowsec)", 15: "B274 (to Highsec)"},
                   3: {0:"Unstable Wormhole", 1:"K162 (from Unknown)", 2:"K162 (from Dangerous unknown)", 3:"K162 (from Deadly unknown)", 4:"K162 (from Nullsec)", 5:"K162 (from Lowsec)", 6:"K162 (from Highsec)", 7:"V301 (to C1)", 8:"I182 (to C2)", 9:"N968 (to C3)", 10:"T405 (to C4)",11:"N770 (to C5)", 12:"A982 (to C6)", 13: "K346 (to Nullsec)", 14: "U210 (to Lowsec)", 15: "D845 (to Highsec)"},
                   4: {0:"Unstable Wormhole", 1:"K162 (from Unknown)", 2:"K162 (from Dangerous unknown)", 3:"K162 (from Deadly unknown)", 4:"K162 (from Nullsec)", 5:"K162 (from Lowsec)", 6:"K162 (from Highsec)", 7:"P060 (to C1)", 8:"N766 (to C2)", 9:"C247 (to C3)", 10:"X877 (to C4)",11:"H900 (to C5)", 12:"U574 (to C6)", 13: " (to Nullsec)", 14: "  (to Lowsec)", 15: "  (to Highsec)"},
                   5: {0:"Unstable Wormhole", 1:"K162 (from Unknown)", 2:"K162 (from Dangerous unknown)", 3:"K162 (from Deadly unknown)", 4:"K162 (from Nullsec)", 5:"K162 (from Lowsec)", 6:"K162 (from Highsec)", 7:"Y790 (to C1)", 8:"D364 (to C2)", 9:"M267 (to C3)", 10:"E175 (to C4)",11:"H296 (to C5)", 12:"V753 (to C6)", 13: "Z142 (to Nullsec)", 14: "C140 (to Lowsec)", 15: "D792 (to Highsec)"},
                   6: {0:"Unstable Wormhole", 1:"K162 (from Unknown)", 2:"K162 (from Dangerous unknown)", 3:"K162 (from Deadly unknown)", 4:"K162 (from Nullsec)", 5:"K162 (from Lowsec)", 6:"K162 (from Highsec)", 7:"Q317  (to C1)", 8:"G024 (to C2)", 9:"L477 (to C3)", 10:"Z457 (to C4)",11:"V911 (to C5)", 12:"W237 (to C6)", 13: "Z142 (to Nullsec)", 14: "C140 (to Lowsec)", 15: "D792  (to Highsec)"},
                   7: {0:"Unstable Wormhole", 1:"K162 (from Unknown)", 2:"K162 (from Dangerous unknown)", 3:"K162 (from Deadly unknown)", 4:"K162 (from Nullsec)", 5:"K162 (from Lowsec)", 6:"K162 (from Highsec)", 7:"Z971 (to C1)", 8:"R943 (to C2)", 9:"X702 (to C3)", 10:" (to C4)",11:"M555 (to C5)", 12:"  (to C6)", 13: " (to Nullsec)", 14: " (to Lowsec)", 15: "A641 (to Highsec)"},
                   8: {0:"Unstable Wormhole", 1:"K162 (from Unknown)", 2:"K162 (from Dangerous unknown)", 3:"K162 (from Deadly unknown)", 4:"K162 (from Nullsec)", 5:"K162 (from Lowsec)", 6:"K162 (from Highsec)", 7:" (to C1)", 8:"  (to C2)", 9:" (to C3)", 10:"  (to C4)",11:"N432 (to C5)", 12:"  (to C6)", 13: "  (to Nullsec)", 14: "  (to Lowsec)", 15: "  (to Highsec)"},
                   9: {0:"Unstable Wormhole", 1:"K162 (from Unknown)", 2:"K162 (from Dangerous unknown)", 3:"K162 (from Deadly unknown)", 4:"K162 (from Nullsec)", 5:"K162 (from Lowsec)", 6:"K162 (from Highsec)", 7:"  (to C1)", 8:"R943  (to C2)", 9:" (to C3)", 10:"  (to C4)",11:"N432 (to C5)", 12:"  (to C6)", 13: "S199 (to Nullsec)", 14: "N944 (to Lowsec)", 15: "B449 (to Highsec)"} };
               
  //when opened with system in url
  
  
  if( typeof(CCPEVE) != "undefined" )
  {
    CCPEVE.requestTrust('http://siggy.borkedlabs.com/*');
  }


  jQuery.extend({
   scope: function(fn, scope)
   {
    return function()
    {
     return fn.apply(scope, arguments);
    }
   }
  });
  
  var siggymain = function()
  {
    this.systemID = 0;
    this.systemClass = 9;
    this.systemName = '';
    this.freezeSystem = 0;
    this.lastUpdate = 0;
    this.sigData = {};
    this.editingSig = false;
    this.sigClocks = {};
    this.systemList = {};
    this.forceUpdate = true;
    this._updateTimeout = null;
    this.baseUrl = '';
    this.lastGlobalNotesUpdate = 0;
    this.globalNotes = '';
    this.editingGlobalNotes = false;
    this.publicMode = false;
  }
  
  siggymain.prototype.getCurrentTime = function()
  {
    var date = new Date();
    var time = pad(date.getUTCHours(),2)+':'+pad(date.getUTCMinutes(),2)+':'+pad(date.getUTCSeconds(),2);
    
    date = null;
    delete date;
    
    return time;
  }
  
  siggymain.prototype.displayTimeStamp = function(unixTimestamp)
  {
    var date = new Date(unixTimestamp*1000);
    var time = pad(date.getUTCDate(),2)+'/'+pad(date.getUTCMonth()+1,2)+' '+pad(date.getUTCHours(),2)+':'+pad(date.getUTCMinutes(),2)+':'+pad(date.getUTCSeconds(),2);
    
    date = null;
    delete date;
    
    return time;
  }
  
  siggymain.prototype.update = function()
  {
    request = {systemID: this.systemID, lastUpdate: this.lastUpdate,lastGlobalNotesUpdate: this.lastGlobalNotesUpdate,systemName: this.systemName, freezeSystem: this.freezeSystem};
    request['forceUpdate'] = this.forceUpdate;
    
    var that = this;
    $.get(this.baseUrl + 'update',request, function(data) {
      if( data.systemUpdate )
      {
        that.updateSystemInfo(data.systemData);
        that.updateSystemOptionsForm(data.systemData);
      }
      if( data.sigUpdate )
      {
        that.updateSigs(data.sigData);
      }
      if( data.systemListUpdate )
      {
        that.systemList = data.systemList;
        that.updateSystemList( that.systemList );
      }
      if( data.globalNotesUpdate )
      {
        if( !that.editingGlobalNotes )
        {
          that.lastGlobalNotesUpdate = data.lastGlobalNotesUpdate;
          that.globalNotes = data.globalNotes;
          $('#thegnotes').html(that.globalNotes.replace(/\n/g, '<br />'));
          $('#gNotesTime').text( that.displayTimeStamp(that.lastGlobalNotesUpdate) );
        }
      }
      
      
      that.lastUpdate = data.lastUpdate;
    //  $.unblockUI();
    },'json');

    this.forceUpdate = false;
    $('#updateTime span.time').text(this.getCurrentTime());
    this._updateTimeout = setTimeout( function(thisObj){ thisObj.update(0) },10000, this);
  }
  
  
  siggymain.prototype.sortSystemListInUse = function(a,b)
  {
    if( a[1] > b[1])
    {
      return -1;
    }
    else
    {
      return 1;
    }
  }
  
  siggymain.prototype.sortSystemListLastActive = function(a,b)
  {
    if( a[2] > b[2])
    {
      return -1;
    }
    else
    {
      return 1;
    }
  }
  
  
  
  siggymain.prototype.sortSystemList = function(a,b)
  {
    if( a[1] == b[1] )
    {
      if( a[2] > b[2])
      {
        return -1;
      }
      else
      {
        return 1;
      }
    }
    //if 1 and 0
    else if( a[1] > b[1] )
    {
      return -1;
    }
    else if( a[1] < b[1] )
    {
      return 1;
    }
  }
  
  siggymain.prototype.updateSystemList = function (systemList)
  {
    var sortable = [];
    for( var i in systemList )
    {
      sortable.push([i, systemList[i].inUse, systemList[i].lastActive]);
    }
    sortable.sort(this.sortSystemList);
  
    var listContainer = $('#systemList ul');
    listContainer.empty();
    for( var i in sortable )
    {
      var key = sortable[ i ][ 0 ];
      var sysClass = Number(systemList[key].sysClass);
      switch( sysClass )
      {
        case 1:
        case 2:
        case 3:
          var colorClass = 'classUnknown';
          break;
        case 4:
        case 5:
          var colorClass = 'classDangerous';
          break;
        case 6:
          var colorClass = 'classDeadly';
          break;
        case 7:
          var colorClass = 'classHigh';
          sysClass = 'H';
          break;
        case 8:
          var colorClass = 'classLow';
          sysClass = 'L';
          break;
        case 9:
          var colorClass = 'classNull';
          sysClass = 'N';
          break;
        default:
          var colorClass = 'classUnknown';
          break;
      }
    //  var that = this;
      var displayName = '';
      if( systemList[key].displayName != "" )
      {
        displayName = systemList[key].displayName;
      }
      else
      {
        displayName = systemList[key].name;
      }
      
      var item = $('<li>').text(displayName).prepend( $('<span>').addClass('sysClass').addClass(colorClass).text(sysClass) );
      this.registerSwitchHandler(item, systemList[key].systemID, systemList[key].name);
      if( systemList[key].name == this.systemName )
      {
        item.addClass('sysSelected');
      }
      
      if( systemList[key].inUse == 1 )
      {
        item.addClass('inUse');
      }
      else
      {
        item.addClass('notInUse');
      }
      listContainer.append(item);
    }
  }
  
  siggymain.prototype.registerSwitchHandler = function(item, systemID, systemName)
  {
    var that= this;
    item.click( function() { 
        //$.blockUI({ message: '<h1 style="font-size:1.2em;"><strong>Loading...</strong></h1>' }); 
        that.switchSystem(systemID, systemName);
        
      } );
  }
  
  siggymain.prototype.switchSystem = function(systemID, systemName)
  {
    this.setSystemID( systemID );
    this.systemName = systemName;
    this.forceUpdate = true;
    this.freeze();
    clearTimeout(this._updateTimeout);
    $("#sigTable tbody").empty();
    this.editingSig = false;
    this.sigData = {};
    this.update();
  }
  
  siggymain.prototype.updateSigs = function( sigData )
  {
      for( var i in this.sigData )
      {
        if( typeof(sigData[ i ]) !== undefined && typeof(sigData[ i ]) != "undefined" && sigData[i] !== null )
        {
          sigData[i].exists = true;
          if( !this.sigData[i].editing )
          {
            this.sigData[i] = sigData[i];
            this.updateSigRow( this.sigData[i] );
          }
        }
        else
        {
            if( this.sigData[i].editing )
            {
              continue;
            }
            this.removeSigRow(this.sigData[i]);
            delete this.sigData[i];
            delete this.sigClocks[i];
        }
      }
      
      for( var i in sigData )
      {
        if( sigData[i].exists != true )
        {
         // console.log(sigData);
          this.addSigRow(sigData[i]);
          this.sigData[i] = sigData[i];
        }
      }
      $('#sigTable').trigger('update');
  }
  
  siggymain.prototype.updateSystemInfo = function(systemData)
  {
      $('#region').text( systemData.regionName );
      $('#constellation').text( systemData.constellationName );
      $('#planetsmoons').text( systemData.planets+"/"+systemData.moons );
      $('#truesec').text( systemData.truesec );
      $('#radius').text( systemData.radius+' AU' );
      $('#belts').text( systemData.belts );
      $('#systemEffect').text( systemData.effectTitle );
      //
      $('#staticInfo').empty();
      for( var i in systemData.staticData )
      {
        var theStatic = systemData.staticData[i];
        var destBlurb = '';
        theStatic.staticDestClass = Number(theStatic.staticDestClass);
        
        if( theStatic.staticDestClass <=6 )
        {
          destBlurb = " (to C"+theStatic.staticDestClass+")";
        }
        else if( theStatic.staticDestClass == 7 )
        {
          destBlurb = " (to Highsec)";
        }
        else if( theStatic.staticDestClass == 8 )
        {
          destBlurb = " (to Lowsec)";
        }
        else
        {
          destBlurb = " (to Nullsec)";
        }
        var staticBit = $("<p>").text( theStatic.staticName + destBlurb );
        var staticInfo = "<b>" + theStatic.staticName + "</b><br />" 
                         + "Max Mass: " + theStatic.staticMass +" billion<br />"
                         +"Max Jumpable Mass: " + theStatic.staticJumpMass + " million<br />"
                         +"Max Lifetime: " + theStatic.staticLifetime + " hrs<br />"
                         +"Signature Size: " + theStatic.staticSigSize + " <br />";
        
        $('#staticInfo').append(staticBit).append( $("<div>").attr('id','static-info-'+theStatic.staticID).addClass('tooltip').html(staticInfo) );
        staticBit.ezpz_tooltip({contentId:'static-info-'+theStatic.staticID});
      }
      //$('#staticInfo').html(systemData.staticInfo);
      if( systemData.class <= 6 )
      {
        $('#systemName').text( systemData.name + " <C" + systemData.class +">");
      }
      else
      {
        $('#systemName').text( systemData.name );
      }
      this.setSystemID(systemData.id);
      this.setSystemClass(systemData.class);
      this.systemName = systemData.name;
  }
  
  
  siggymain.prototype.updateSystemOptionsForm = function(systemData)
  {
      $('#systemOptions input[name=label]').val( systemData.displayName );
      $('#systemOptions input[name=inUse]').filter('[value='+systemData.inUse+']').attr('checked', true);
  }
  
  
  siggymain.prototype.updateSigRow = function(sigData)
  {
        $('#sig-'+sigData.sigID+' td.sig').text(sigData.sig);
        $('#sig-'+sigData.sigID+' td.type').text( this.convertType(sigData.type));
        
        //stupidity part but ah well
        $('#sig-'+sigData.sigID+' td.desc').text( this.convertSiteID(this.systemClass, sigData.type, sigData.siteID) );
        $('#sig-'+sigData.sigID+' td.desc p').remove();
        $('#sig-'+sigData.sigID+' td.desc').append( $('<p>').text(sigData.description) );
  }
  
  siggymain.prototype.removeSigRow = function(sigData)
  {
    $('#sig-'+sigData.sigID).remove();
  }
  
  siggymain.prototype.addSigRow = function(sigData)
  {
      var that = this;
      var descTD = $('<td>').addClass('desc');
      descTD.text( siggy.convertSiteID(this.systemClass, sigData.type, sigData.siteID) );
      descTD.append( $('<p>').text(sigData.description) );
        $("#sigTable tbody").append( 
          $('<tr>').attr('id','sig-'+sigData.sigID).append( $('<td>').addClass('center').addClass('edit').append( $('<img>').attr('src', this.baseUrl +'public/images/pencil.png').click( function(e) { that.editSigForm(sigData.sigID) } ) ) )
                   .append( $('<td>').addClass('center').addClass('sig').text(sigData.sig) )
                   .append( $('<td>').addClass('center').addClass('type').text( siggy.convertType(sigData.type) ) )
                   .append( descTD )
                   .append( $('<td>').addClass('center').addClass('age').append( $("<span>").text("--") ).append( $("<div>").addClass('tooltip').attr('id','age-timestamp-'+sigData.sigID).text(this.displayTimeStamp(sigData.created)) ) )
                   .append( $('<td>').addClass('center').addClass('remove').append( $('<img>').attr('src', this.baseUrl +'public/images/delete.png') ).click( function(e) { that.removeSig(sigData.sigID) } ) ) );
    
    this.sigClocks[sigData.sigID] = new CountUp(sigData.created*1000, '#sig-'+sigData.sigID+' td.age span', "test");
    $('#sig-'+sigData.sigID+' td.age span').ezpz_tooltip({contentId:'age-timestamp-'+sigData.sigID});
  }
  
  
  siggymain.prototype.editSigForm = function( sigID )
  {
    if( this.editingSig )
    {
      return;
    }
    
    this.sigData[ sigID ].editing = true;
    this.editingSig = true;
    
    var controlEle = $("#sig-"+sigID+" td.edit");
    controlEle.text('');
    
    var that = this;
    controlEle.append($('<img>').attr('src', this.baseUrl +'public/images/accept.png').click( function(e) { that.editSig(sigID) } ));
    
    var sigEle = $("#sig-"+sigID+" td.sig");
    sigEle.text('');
    
    sigEle.append( $('<input>').val( this.sigData[ sigID ].sig ).addClass('sigEdit').attr('maxlength',3) );
    
    var typeEle = $("#sig-"+sigID+" td.type");
    typeEle.text('');
    
    typeEle.append( this.generateSelect({none: '--', wh: 'WH', ladar: 'Ladar', radar: 'Radar', mag: 'Mag', grav: 'Grav'}, this.sigData[sigID].type ).change( function() { that.editTypeSelectChange(sigID) } ) );
    
    var descEle = $('#sig-'+sigID+' td.desc');
    descEle.text('');
    descEle.append( this.generateSiteSelect(this.systemClass, this.sigData[sigID].type, this.sigData[sigID].siteID) ).append( $('<br />') ).append( $('<input>').val( this.sigData[sigID].description ) );
    
  }
  
  siggymain.prototype.editTypeSelectChange = function( sigID )
  {
    var newType = $("#sig-"+sigID+" td.type select").val();
    if( this.sigData[ sigID ].type != newType )
    {
      $('#sig-'+sigID+' td.desc select').replaceWith( this.generateSiteSelect(this.systemClass, newType, 0) );
    }
  }
  
  siggymain.prototype.editSig = function( sigID )
  {
    var sigEle = $("#sig-"+sigID+" td.sig input");
    var typeEle = $("#sig-"+sigID+" td.type select");
    var descEle = $("#sig-"+sigID+" td.desc input");
    var siteEle = $("#sig-"+sigID+" td.desc select");
    
    if( sigEle.val().length != 3 )
    {
      return false;
    }
    
    var sigUpdate = {};
    this.sigData[ sigID ].sig = sigEle.val();
    this.sigData[ sigID ].type = typeEle.val();
    this.sigData[ sigID ].siteID = siteEle.val();
    this.sigData[ sigID ].description = descEle.val();
    
    var that=this;
    $.post(this.baseUrl +'dosigEdit', { 
                 sigID: sigID,
                 sig: this.sigData[ sigID ].sig,
                 type: this.sigData[ sigID ].type,
                 desc: this.sigData[ sigID ].description,
                 siteID: this.sigData[ sigID ].siteID,
                 systemID: this.systemID
        }, 
         function() {

            that.editingSig = false;
            that.sigData[ sigID ].editing = false;
    
          } ); 
    
    sigEle.remove();
    typeEle.remove();
    descEle.remove();
    siteEle.remove();
    
    this.updateSigRow( this.sigData[ sigID ] );
    
    var controlEle = $("#sig-"+sigID+" td.edit");
    controlEle.text('');
    controlEle.append( $('<img>').attr('src', this.baseUrl +'public/images/pencil.png').click( function(e) { that.editSigForm(sigID) }) );
    

    
  }
  
  siggymain.prototype.generateSiteSelect = function( whClass, type, siteID )
  {
    if( type =="wh" )
      return this.generateSelect( whLookup[ whClass ], siteID );
    else if ( type == "ladar" )
      return this.generateSelect( ladarsLookup, siteID );
    else if ( type == "mag" )
      return this.generateSelect( magsLookup[ whClass ], siteID );
    else if( type == "grav" )
      return this.generateSelect( gravsLookup, siteID );
    else if( type == "radar" )
      return this.generateSelect( radarsLookup[ whClass ], siteID );
    else
      return this.generateSelect( {0: '--'}, 0 );
  }
  
  
  
  siggymain.prototype.generateSelect = function( options, select )
  {
    var newSelect = $('<select>');
    
    for( var i in options )
    {
      newSelect.append( $('<option>').attr('value', i).text( options[i] ) );
    }
    
    newSelect.val( select );
  
    return newSelect;
  }
  
  siggymain.prototype.removeSig = function( sigID )
  {
    delete this.sigClocks[sigID];
    this.removeSigRow({sigID: sigID});
    $('#sigTable').trigger('update');
    
    $.post(this.baseUrl +'dosigRemove', { 
                 systemID: this.systemID,
                 sigID: sigID
    } );
  }
  
  siggymain.prototype.convertType = function(type)
  {
    if( type == 'none' )
      return "";
    else if( type == 'wh' )
      return "WH";
    else
      return type.charAt(0).toUpperCase() + type.slice(1);

  }
  
  siggymain.prototype.convertSiteID = function( whClass, type, siteID )
  {
    if( type == 'wh' )
      return whLookup[ whClass ][siteID];
    else if(type == 'mag')
      return magsLookup[ whClass ][siteID];
    else if(type == 'radar')
      return radarsLookup[ whClass ][siteID];
    else if(type =='ladar')
      return ladarsLookup[siteID];
    else if(type =='grav')
      return gravsLookup[siteID];
    else
      return "";
  }
  
  siggymain.prototype.setSystemID = function(systemID)
  {
    this.systemID = systemID;
  }
  
  siggymain.prototype.setSystemClass = function(systemClass)
  {
    this.systemClass = systemClass;
  }
  
  siggymain.prototype.setupAddBox = function()
  {
    //override potential form memory
    $('#sigAddBox select[name=type]').val('none');
    
    var that = this;
    $('#sigAddBox form').submit(function() {
      sigEle = $('#sigAddBox input[name=sig]');
      typeEle = $('#sigAddBox select[name=type]');
      descEle = $('#sigAddBox input[name=desc]');
      siteEle = $('#sigAddBox select[name=site]');
      
      if( sigEle.val().length != 3 )
      {
        return false;
      }
      
      $.post(that.baseUrl +'dosigAdd', { 
                  systemID: siggy.systemID,
                   sig: sigEle.val(),
                   type: typeEle.val(),
                   desc: descEle.val(),
                   siteID: siteEle.val() 
          }, 
          function(newSig) {
            for( var i in newSig )
            {
              that.addSigRow(newSig[i]);
            }
            $.extend(that.sigData,newSig);
            $('#sigTable').trigger('update');
            
      },'json' ); 
      
      sigEle.val('');
      typeEle.val('none');
      descEle.val('');
      siteEle.replaceWith( $('<select>').attr('name', 'site') );
      return false;
      
    });
        
  }
  
  siggymain.prototype.initialize = function()
  {
    this.forceUpdate = true;
    siggy.update();
    
    $('#sigTable').tablesorter({headers: {0: {sorter:false}, 5:{sorter:false} } }); 
    
    this.setupAddBox();
  
    var that = this;
    $('#unfreezeLink').click( function() {
      that.unfreeze();
    } );
    $('#freezeLink').click( function() {
      that.freeze();
    } );


    $('#sigAddBox select[name=type]').change( function() {
      newType = $(this).val();
      
      $('#sigAddBox select[name=site]').replaceWith( that.generateSiteSelect(siggy.systemClass, newType, 0).attr('name','site') );
    } );
                  
    
    $("#systemInfoButton").click( function() {
      that.handleSystemAdvancedMenuClick('info');
    } );
    
    
    $("#systemOptionsButton").click( function() {
      that.handleSystemAdvancedMenuClick('options');
    } );
    
    $('#systemOptions button.save').click( function () {
      var label = $('#systemOptions input[name=label]').val();
      var inUse = $('#systemOptions input[name=inUse]:checked').val();
      
      $.post( that.baseUrl +'dosaveSystemOptions', { systemID: that.systemID,
       label: label, 
       inUse: inUse 
       }, 
       function(data) { 
        if( that.systemList[ that.systemID ] )
        {
          that.systemList[ that.systemID ].displayName = label;
          that.systemList[ that.systemID ].inUse = inUse;
          that.updateSystemList( that.systemList );
        } 
      });
    } );
    
    $('#globalNotesButton').click( function() {
      if( $('#globalNotes').is(":visible") )
      {
        $('#globalNotes').hide();
        $('#globalNotesButton').html('Notes &darr;');
      }
      else
      {
        $('#globalNotes').show();
        $('#globalNotesButton').html('Notes &uarr;');
      }
    });
    
    $('#gNotesEdit').click( function() {
      $(this).hide();
      $('#thegnotes').hide();
      $('#gNotesEditBox').val(that.globalNotes).show();
      $('#gNotesSave').show();
    });
    
    $('#gNotesSave').click( function () {
      that.globalNotes = $('#gNotesEditBox').val();
      $.post(that.baseUrl +'doglobalNotesSave', { 
                   notes: that.globalNotes,
          }, 
           function(data) {
              that.editingGlobalNotes = false;
              that.lastGlobalNotesUpdate = data;
              $('#gNotesTime').text( that.displayTimeStamp(that.lastGlobalNotesUpdate) );
            } ); 
      
      $('#thegnotes').html(that.globalNotes.replace(/\n/g, '<br />')).show(); 
      $('#gNotesEditBox').hide();
      $('#gNotesEdit').show();
      $(this).hide();
    });
  
  
  }
  
  siggymain.prototype.handleSystemAdvancedMenuClick = function(what)
  {
    var info = $('#systemInfoButton');
    var options = $('#systemOptionsButton');
    
    if( what == 'options' )
    {
        info.removeClass('selected');
        options.addClass('selected');
        
        $('#systemInfo').hide();
        $('#systemOptions').show();
    }
    else
    {
        options.removeClass('selected');
        info.addClass('selected');
        
        $('#systemInfo').show();
        $('#systemOptions').hide();
    }
  }
  
  siggymain.prototype.freeze = function()
  {
    this.freezeSystem = 1;
    $('#freezeOpt').hide();
    $('#unfreezeOpt').show();
  }
  
  siggymain.prototype.unfreeze = function()
  {
    this.freezeSystem = 0;
    $('#unfreezeOpt').hide();
    $('#freezeOpt').show();
  }